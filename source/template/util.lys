% === Template util ===

{% macro logo(scale = 1) %}
  \roman \bold \concat {
    \magnify #{{ 1.5 * scale }} \musicglyph "clefs.G"
    \magnify #{{ 2.5 * scale }} {
      \rotate #30 Б
      \lower #{{ 0.75 * scale }} а
      \raise #{{ 0.75 * scale }} я
      \rotate #-30 Н
    }
  }
{% endmacro %}

{% macro prelude() %}
  \version "2.25.2"
  rootUrl = "https://volodymyrprokopyuk.github.io/bayan"
  stBass = \markup \larger \box Г % Готовий бас
  frBass = \markup \larger \box В % Вибiрна система
  puBass = \markup \larger \box Б % Чистий бас
  artSimile = \markup \italic simile
  artLegato = \markup \italic legato
  artStaccato = \markup \italic staccato
  dynCresc = \markup \lower #3 \italic "cresc."
  dynDim = \markup \lower #3 \italic "dim."
  tempRit = "rit."
  tempRall = "rall."
  tempATempo = "a tempo"
  tempAccel = "accel."
  tempSost = "sost."
  barFermata = \mark \markup \musicglyph #"scripts.ufermata"
  keyChangeBeforeBar = \once {
    \override Score.BreakAlignment.break-align-orders =
    #(make-vector 3 '(
       left-edge
       staff-ellipsis
       cue-end-clef
       ambitus
       breathing-sign
       signum-repetitionis
       clef
       cue-clef
       key-cancellation
       key-signature
       staff-bar
       time-signature
       custos))
    \override Staff.KeyCancellation.extra-spacing-width = #'(-1.5 . 0)
  }
  \defineBarLine "!!" #'("!!" "!!" "!!")
  tocSection =
  #(define-music-function (label text) (symbol-list-or-symbol? markup?)
     (add-toc-item! 'tocSectionMarkup text label))
{% endmacro %}

{% macro scoreConfig() %}
  \Score
  \omit BarNumber
  \override DynamicLineSpanner.staff-padding = #3
{% endmacro %}

{% macro paperLayout() %}
  top-margin = 8
  bottom-margin = 8
  left-margin = 15
  right-margin = 15
  indent = 7
{% endmacro %}

% === Piece util ===

{% macro pieceMeta(piece) %}
  \markup \line {
    \caps id: {{ piece.id }}, \caps org: {{ piece.org }},
    \caps sty: {{ piece.sty }}, \caps gnr: {{ piece.gnr }},
    \caps frm: {{ piece.frm | join(" ") }},
    \caps bss: {{ piece.bss | join(" ") }},
    \caps lvl: {{ piece.lvl }}
  }
{% endmacro %}

{% macro pieceTitle(piece) %}
  \header {
    title = "{{ piece.tit }}"
    subtitle = "{{ piece.sub or '' }}"
    {% if not args.nometa %}
      meta = {{ pieceMeta(piece) }}
    {% endif %}
    {% if piece.com %}
      composer = "{{ piece.com | join("–") }}"
    {% endif %}
    {% if piece.arr %}
      arranger = "{{ piece.aty }} {{ piece.arr }}"
    {% endif %}
  }
{% endmacro %}

{% macro pieceTitleMarkup() %}
  scoreTitleMarkup = \markup \column {
    \fill-line { \fontsize #4 \bold \fromproperty #'header:title }
    \vspace #0.2
    \fill-line { \fontsize #1.5 \fromproperty #'header:subtitle }
    \fill-line { \abs-fontsize #10 \fromproperty #'header:meta }
    \vspace #0.2
    \fill-line {
      \fontsize #1 \italic {
        \fromproperty #'header:arranger \fromproperty #'header:composer
      }
    }
  }
{% endmacro %}

{% macro pieceScore(piece) %}
  \score {
    {{ pieceTitle(piece) }}
    {% set source = piece.src + "/" + piece.file + ".lys" %}
    {% from source import rightHand, leftHand %}
    \new PianoStaff = bayan {
      <<
        \new Staff = rightHand { {{ rightHand() }} }
        \new Staff = leftHand { {{ leftHand() | stradella }} }
      >>
    }
  }
{% endmacro %}

% === Score util ===

% hSpace explicitly adds horizontal extra space before a note or chord
% - sh defines the shift amount of horizontal space
%   - Unit = staff units
{% macro hSpace(sh = 2.5) %}
  \tweak extra-spacing-width #'(-{{ sh }} . 0)
{% endmacro %}

% dynPadding adds padding to dynamics relative to the Staff within a \relative
% - bs = defines the vertical base line between the Staff and dynamics
%   - Unit = staff units
{% macro dynPadding(bs = 3.0) %}
  \override DynamicLineSpanner.staff-padding = #{{ bs }}
{% endmacro %}

% momentBeat defines the duration of the base moment and the structure of beats
% per mearuse
% - moment defines the duration of the base moment
%   - Unit = note duration (e. g. 1/2, 1/4)
% - beat defines the number and the structure of beats per measure
%   - Unit = integer (e. g. 1,1,1,1, #'(1), 2,3)
{% macro momentBeat(moment, beat) %}
  \set Staff.beamExceptions = #'()
  \set Staff.baseMoment = #(ly:make-moment {{ moment }})
  \set Staff.beatStructure = {{ beat }}
{% endmacro %}

% shapedSlur controls the shape of a slur placed immediately after the
% shapedSlur macro
% - dir defines the direction of the slur
%   - fu = forward up (north east), fd = forward down (south east)
%     bu = backward up (north west), bd = backward down (south west)
% - bs defines the vertical base line position of a slur relative to the
%   the staff center (3rd line of the staff)
%   - Unit (absolute) = staff units (distance between two adjacent staff lines)
% - sh defines the horizontal position of a slur relative to the note to which
%   the slure is attached
%   - Unit = staff units, positive shifts right, negative shifts left
% - wd defines the width of a slur in terms of a multiplicative coefficient
%   - Unit = coefficient k, k < 1 decreases width, k > 1 increases width
% - ht defines the height of a slur
%   - Unit (absolute) = staff unit
% - dt defines the height difference (delta) between the starting and ending
%   points of the slur
%   - Unit (absolute) = staff unit
{% macro shapedSlur(dir, bs = 2.0, sh = 0.5, wd = 1.0, ht = 1.0, dt = 0.0) %}
  {% set ax = 0.0 * wd + sh %}
  {% set bx = 1.0 * wd + sh %}
  {% set cx = 2.0 * wd + sh %}
  {% set dx = 3.0 * wd + sh %}
  {% set ay, dy = bs %}
  {% set by, cy = (bs + ht) %}
  {% if dir == "fu" %} {# forward up slur #}
    {% set dy = dy + dt %}
  {% elif dir == "fd" %} {# forward down slur #}
    {% set dy = dy + dt %}
    {% set ay = -ay %}
    {% set by = -by %}
    {% set cy = -cy %}
    {% set dy = -dy %}
  {% elif dir == "bu" %} {# backward up slur #}
    {% set ax = ax - 3.0 * wd %}
    {% set bx = bx - 3.0 * wd %}
    {% set cx = cx - 3.0 * wd %}
    {% set dx = dx - 3.0 * wd %}
    {%set ay = ay + dt %}
  {% elif dir == "bd" %} {# backward down slur #}
    {% set ax = ax - 3.0 * wd %}
    {% set bx = bx - 3.0 * wd %}
    {% set cx = cx - 3.0 * wd %}
    {% set dx = dx - 3.0 * wd %}
    {%set ay = ay + dt %}
    {% set ay = -ay %}
    {% set by = -by %}
    {% set cy = -cy %}
    {% set dy = -dy %}
  {% endif %}
  \tweak control-points
    #'(({{ ax }} . {{ ay }}) ({{ bx }} . {{ by }})
       ({{ cx }} . {{ cy }}) ({{ dx }} . {{ dy }}))
{% endmacro %}

{% macro v2(a, b) %}
  << \relative { {{ a }} } \\ \relative { {{ b }} } >>
{% endmacro %}
